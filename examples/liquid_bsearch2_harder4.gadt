datatype Array : type * num
external let array_make :
  ∀n, a [0≤n]. Num n → a → Array (a, n) = "fun a b -> Array.make a b"
external let array_get :
  ∀n, k, a [0≤k ∧ k+1≤n]. Array (a, n) → Num k → a = "fun a b -> Array.get a b"
external let array_set :
  ∀n, k, a [0≤k ∧ k+1≤n]. Array (a, n) → Num k → a → () =
  "fun a b c -> Array.set a b c"
external let array_length :
  ∀n, a [0≤n]. Array (a, n) → Num n = "fun a -> Array.length a"

datatype LinOrder
datacons LE : LinOrder
datacons GT : LinOrder
datacons EQ : LinOrder

external let compare : ∀a. a → a → LinOrder =
  "fun a b -> let c = Pervasives.compare a b in
              if c < 0 then LE else if c > 0 then GT else EQ"
external let equal : ∀a. a → a → Bool = "fun a b -> a = b"

external let div2 : ∀n. Num (2 n) → Num n = "fun x -> x / 2"

let bsearch = fun key vec ->
  let rec look = fun key vec lo hi ->
    ematch hi with
      | _ when lo <= hi ->
        let m = div2 (hi + lo) in
        let x = array_get vec m in
        (ematch compare key x with
           | LE -> look key vec lo (m + (-1))
           | GT -> look key vec (m + 1) hi
           | EQ ->
             ematch equal key x with
               | True -> m
               | False -> -1)
      | _ -> -1 in
  look key vec 0 (array_length vec + (-1))
