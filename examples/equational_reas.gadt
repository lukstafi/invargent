datatype Place : type
datatype Nearby : type * type
datatype A
datatype B
datacons LocA : Place A
datacons LocB : Place B
external is_nearby : ∀a,b. Nearby (a, b) → Bool = "is_nearby"
datacons Here : ∀a. Place a * Place a ⟶ Nearby (a, a)
datacons Transitive : ∀a,b,c. Nearby (a, b) * Nearby (b, c) ⟶ Nearby (a, c)
external wander : ∀a. Place a → ∃b. (Place b, Nearby (a, b)) = "wander"
datatype Meet : type * type
datacons Same : ∀a,b [a=b]. Meet (a, b)
datacons NotSame : ∀a, b. Meet (a, b)
external compare : ∀a,b. Place a → Place b → Meet (a, b) = "compare"

let rec walk = fun x goal ->
  match compare x goal with
  | Same -> Here (x, goal)
  | NotSame ->
    let y, to_y = wander x in
    Transitive (to_y, walk y goal)
test (is_nearby (walk LocA LocB))
