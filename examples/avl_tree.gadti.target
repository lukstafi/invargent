(** We follow the AVL tree algorithm from OCaml Standard Library, where 
    the branches of a node are allowed to differ in height by at most 2. *)
datatype Avl : type * num

datacons Empty : ∀a. Avl (a, 0)

datacons Node : ∀k, m, n, a[0 ≤ m ∧ 0 ≤ n ∧ n ≤ m + 2 ∧
   m ≤ n + 2 ∧ k=max (m, n)].Avl (a, m) * a * Avl (a, n) * Num (k + 1)
   ⟶ Avl (a, k + 1)

datatype LinOrder

datacons LT : LinOrder

datacons EQ : LinOrder

datacons GT : LinOrder

external val compare : ∀a. a → a → LinOrder

val height : ∀n, a. Avl (a, n) → Num n

val create :
   ∀k, n, a[0 ≤ n ∧ 0 ≤ k ∧ n ≤ k + 2 ∧ k ≤ n + 2].
   Avl (a, k) → a → Avl (a, n) → ∃i[i=max (k + 1, n + 1)].Avl (a, i)

val singleton : ∀a. a → Avl (a, 1)

val rotr :
   ∀k, n, a[0 ≤ n ∧ n + 2 ≤ k ∧ k ≤ n + 3].
   Avl (a, k) → a → Avl (a, n) → ∃n[n ≤ k + 1 ∧
     k ≤ n].Avl (a, n)

val rotl :
   ∀k, n, a[0 ≤ k ∧ n ≤ k + 3 ∧ k + 2 ≤ n].
   Avl (a, k) → a → Avl (a, n) → ∃k[n ≤ k ∧
     k ≤ n + 1].Avl (a, k)

val add :
   ∀n, a.
   a → Avl (a, n) → ∃k[1 ≤ k ∧ n ≤ k ∧ k ≤ n + 1].Avl (a, k)

val mem : ∀n, a. a → Avl (a, n) → Bool

val min_binding : ∀n, a[1 ≤ n]. Avl (a, n) → a

val remove_min_binding :
   ∀n, a[1 ≤ n].
   Avl (a, n) → ∃k[n ≤ k + 1 ∧ k ≤ n ∧ k + 2 ≤ 2 n].Avl (a, k)

val merge :
   ∀k, n, a[n ≤ k + 2 ∧ k ≤ n + 2].
   (Avl (a, n), Avl (a, k)) → ∃i[k ≤ i ∧ n ≤ i ∧ i ≤ n + k ∧
     i≤max (n + 1, k + 1)].Avl (a, i)

val remove :
   ∀n, a.
   a → Avl (a, n) → ∃k[n ≤ k + 1 ∧ 0 ≤ k ∧ k ≤ n].Avl (a, k)
