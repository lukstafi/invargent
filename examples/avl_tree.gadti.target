(** We follow the AVL tree algorithm from OCaml Standard Library, where 
    the branches of a node are allowed to differ in height by at most 2. *)
newtype Avl : type * num

newcons Empty : ∀a. Avl (a, 0)

newcons Node :
  ∀a,k,m,n [k=max(m,n) ∧ 0≤m ∧ 0≤n ∧ n≤m+2 ∧ m≤n+2].
     Avl (a, m) * a * Avl (a, n) * Num (k+1) ⟶ Avl (a, k+1)

newtype LinOrder

newcons LT : LinOrder

newcons EQ : LinOrder

newcons GT : LinOrder

external let compare : ∀a. a → a → LinOrder

val height :

val create :

val singleton :

val bal :

val add :

val mem :

val min_binding :

val remove_min_binding :

val merge :

val remove :
