(** Expressions representing computations on numbers and tuples. *)
datatype Term : type

(** Expressions representing computations on tuples. *)
datatype Calc

(** Multiplication packs the result into existential type. *)
external val mult : ∀i, j. Num i → Num j → ∃k.Num k

external val is_zero : ∀i. Num i → Bool

(** Conditional is eager -- computes all its arguments. *)
external val cond : ∀i, j. Bool → Num i → Num j → ∃k.Num k

(** Numerical constants. *)
datacons Lit : ∀k.Num k ⟶ Calc

(** Addition. Note that we do not convey any information about the result:
    [Calc] does not have a parameter. *)
datacons Plus : Calc * Calc ⟶ Calc

datacons Mult : Calc * Calc ⟶ Calc

(** Conditional. *)
datacons Cond : Term Bool * Calc * Calc ⟶ Calc

datacons IsZero : Calc ⟶ Term Bool

(** Conditional on terms is lazy -- uses pattern matching on [Bool] type
    which is exported to OCaml source using [if] expression. *)
datacons If : ∀a.Term Bool * Term a * Term a ⟶ Term a

datacons Pair : ∀a, b.Term a * Term b ⟶ Term ((a, b))

datacons Fst : ∀a, b.Term ((a, b)) ⟶ Term a

datacons Snd : ∀a, b.Term ((a, b)) ⟶ Term b

(** Small definition. *)
val snd : ∀a, b. (b, a) → a

(** Exposing multiple mutually recursive definitions is tricky, it would
    be easier to only expose the external one. *)
val calc : Calc → ∃n.Num n

val eval : ∀a. Term a → a
