datatype Term : type
datatype Calc

external let mult : ∀i,j. Num i → Num j → ∃k. Num k = "( * )"
external let is_zero : ∀i. Num i → Bool = "(=) 0"
external let cond : ∀i,j. Bool → Num i → Num j → ∃k. Num k = "fun c a b -> if c then a else b"

datacons Lit : ∀k. Num k ⟶ Calc
datacons Plus : Calc * Calc ⟶ Calc
datacons Mult : Calc * Calc ⟶ Calc
datacons Cond : Term Bool * Calc * Calc ⟶ Calc

datacons IsZero : Calc ⟶ Term Bool
datacons If : ∀a. Term Bool * Term a * Term a ⟶ Term a
datacons Pair : ∀a, b. Term a * Term b ⟶ Term (a, b)
datacons Fst : ∀a, b. Term (a, b) ⟶ Term a
datacons Snd : ∀a, b. Term (a, b) ⟶ Term b

let snd = function _, x -> x

let calc, eval =
  let rec eval =
    let rec calc =
      efunction
      | Lit i -> i
      | Plus (x, y) ->
        let rx = calc x in
        let ry = calc y in
        rx + ry
      | Mult (x, y) ->
        let rx = calc x in
        let ry = calc y in
        mult rx ry
      | Cond (b, t, e) ->
        let rt = calc t in
        let re = calc e in
        cond (snd eval b) rt re in
    calc, function
    | IsZero x -> let r = calc x in is_zero r
    | If (b, t, e) -> if snd eval b then snd eval t else snd eval e
    | Pair (x, y) -> snd eval x, snd eval y
    | Fst p -> (match snd eval p with x, y -> x)
    | Snd p -> (match snd eval p with x, y -> y) in
  eval
