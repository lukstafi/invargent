newtype Bar
newtype List : nat

newcons LNil : List 0
newcons LCons : ∀n. Bar * List(n) ⟶ List(n+1)

newtype Boolean
newcons B_true : Boolean
newcons B_false : Boolean

external compare : Bar → Bar → Boolean

let rec merge =
  function LNil, l -> l
    | (LCons (a, l1) as l), LNil -> l
    | (LCons (a, l1) as l), (LCons (b, l3) as l2) ->
	 match compare a b with
		  B_true -> (LCons (a, merge (l1, l2)))
		| B_false -> (LCons (b, merge (l, l3)))
