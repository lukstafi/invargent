newtype Tree : type * num

newtype Forest : type * num

newtype Heap : type * num * num

newtype Order : num * num

newcons Le : ∀i, j[i ≤ (j + 1)]. Order (i, j)

newcons Gt : ∀i, j[j ≤ (i + 1)]. Order (i, j)

newcons Eq : ∀n. Order (n, n)

newcons Node : ∀k, a[0 ≤ k].Num k * a * Forest (a, k) ⟶ Tree (a, k)

newcons TCons : ∀n, a[0 ≤ n].Tree (a, n) * Forest (a, n) ⟶
   Forest (a, n + 1)

newcons TNil : ∀a. Forest (a, 0)

newcons HCons : ∀k, m, n, a[0 ≤ k ∧ (k + 1) ≤ m ∧
   m ≤ n].Tree (a, k) * Heap (a, m, n) ⟶ Heap (a, k, n)

newcons HNil : ∀k, a. Heap (a, k, k)

external compare : ∀i, j. Num i → Num j → Order (i, j)

external val leq : ∀a. a → a → Bool

external val incr : ∀i. Num i → Num (i + 1)

val rank : ∀n, a. Tree (a, n) → Num n

val link : ∀n, a. (Tree (a, n), Tree (a, n)) → Tree (a, 1 + n)
