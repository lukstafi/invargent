external type Matrix : num * num =
  "(float, Bigarray.float64_elt, Bigarray.c_layout) Bigarray.Array2.t"
external let matrix_make :
  ∀n, k [0≤n ∧ 0≤k]. Num n → Num k → Matrix (n, k) =
  "fun a b -> Bigarray.Array2.create Bigarray.float64 Bigarray.c_layout a b"
external let matrix_get :
  ∀n, k, i, j [0≤i ∧ i+1≤n ∧ 0≤j ∧ j+1≤k].
   Matrix (n, k) → Num i → Num j → Float = "Bigarray.Array2.get"
external let matrix_set :
  ∀n, k, i, j [0≤i ∧ i+1≤n ∧ 0≤j ∧ j+1≤k].
   Matrix (n, k) → Num i → Num j → Float → () = "Bigarray.Array2.set"
external let matrix_dim1 :
  ∀n, k [0≤n ∧ 0≤k]. Matrix (n, k) → Num n = "Bigarray.Array2.dim1"
external let matrix_dim2 :
  ∀n, k [0≤n ∧ 0≤k]. Matrix (n, k) → Num k = "Bigarray.Array2.dim2"

datatype Array : type * num
external let array_make :
  ∀n, a [0≤n]. Num n → a → Array (a, n) = "fun a b -> Array.make a b"
external let array_get :
  ∀n, k, a [0≤k ∧ k+1≤n]. Array (a, n) → Num k → a = "fun a b -> Array.get a b"
external let array_set :
  ∀n, k, a [0≤k ∧ k+1≤n]. Array (a, n) → Num k → a → () =
  "fun a b c -> Array.set a b c"
external let array_length :
  ∀n, a [0≤n]. Array (a, n) → Num n = "fun a -> Array.length a"

external let n2f : ∀n. Num n → Float = "float_of_int"
external let equal : ∀a. a → a → Bool = "fun x y -> x = y"
external let leq : ∀a. a → a → Bool = "fun x y -> x <= y"
external let less : ∀a. a → a → Bool = "fun x y -> x < y"

external let minus : Float → Float → Float = "(-.)"
external let plus : Float → Float → Float = "(+.)"
external let mult : Float → Float → Float = "( *. )"
external let div : Float → Float → Float = "( /. )"
external let fabs : Float → Float = "abs_float"
external let fl0 : Float = "0.0"
external let fl1 : Float = "1.0"

external getRow :
  ∀n, k, i [0 ≤ k ∧ 0 ≤ i ∧ i + 1 ≤ n].
  Matrix (n, k) → Num i → Array (Float, k)

external putRow :
  ∀n, k, i, j [0 ≤ j ∧ 0 ≤ i ∧ i + 1 ≤ n ∧ j ≤ k].
  Matrix (n, k) → Num i → Array (Float, j) → ()

external rowSwap :
  ∀i, j, k, n[0 ≤ n ∧ 0 ≤ k ∧ k + 1 ≤ i ∧ n + 1 ≤ i ∧ 0 ≤ j].
  Matrix (i, j) → Num k → Num n → ()

external norm :
  ∀i, k, n[0 ≤ n ∧ n + 1 ≤ i ∧ k ≤ i].
  Array (Float, i) → Num k → Num n → ()

external rowElim :
  ∀i, k, n[0 ≤ k ∧ k + 1 ≤ i ∧ n ≤ i].
  Array (Float, i) → Num n → Num k → ()

let rowMax data m i =
  let x = fabs (matrix_get data i i) in
  let rec loop j x mx =
    eif j + 1 <= m then
      let y = fabs (matrix_get data j i) in
      eif (less x y) then loop (j+1) y j
      else loop (j+1) x mx
    else mx in
  loop (i+1) x i
