datatype List : type
datacons N : ∀a. List a
datacons C : ∀a. a * List a ⟶ List a

datatype Zip2 : type * type
datacons Zero2 : ∀a. Zip2 (a, List a)
datacons Succ2 :
  ∀a, b, c. Zip2 (a, b) ⟶ Zip2 ((c → a), (List c → b))

let rec zip2 = fun n f ->
  let rec zipZ = function
    | Zero2 -> N
    | Succ2 n -> fun _ -> zipZ n in
  let rec zipS = fun f r -> function
    | Zero2 -> C (f, r)
    | Succ2 n -> function
      | N -> zipZ n
      | C (z, zs) -> zipS (f z) (r zs) n in
  zipS f (zip2 n f) n
