external type Matrix : num * num =
  "(float, Bigarray.float64_elt, Bigarray.c_layout) Bigarray.Array2.t"
external let matrix_make :
  ∀n, k [0≤n ∧ 0≤k]. Num n → Num k → Matrix (n, k) =
  "fun a b -> Bigarray.Array2.create Bigarray.float64 Bigarray.c_layout a b"
external let matrix_get :
  ∀n, k, i, j [0≤i ∧ i+1≤n ∧ 0≤j ∧ j+1≤k].
   Matrix (n, k) → Num i → Num j → Float = "Bigarray.Array2.get"
external let matrix_set :
  ∀n, k, i, j [0≤i ∧ i+1≤n ∧ 0≤j ∧ j+1≤k].
   Matrix (n, k) → Num i → Num j → Float → () = "Bigarray.Array2.set"
external let matrix_dim1 :
  ∀n, k [0≤n ∧ 0≤k]. Matrix (n, k) → Num n = "Bigarray.Array2.dim1"
external let matrix_dim2 :
  ∀n, k [0≤n ∧ 0≤k]. Matrix (n, k) → Num k = "Bigarray.Array2.dim2"

external let n2f : ∀n. Num n → Float = "float_of_int"
external let equal : ∀a. a → a → Bool = "fun x y -> x = y"
external let leq : ∀a. a → a → Bool = "fun x y -> x <= y"
external let less : ∀a. a → a → Bool = "fun x y -> x < y"

external let minus : Float → Float → Float = "(-.)"
external let plus : Float → Float → Float = "(+.)"
external let mult : Float → Float → Float = "( *. )"
external let div : Float → Float → Float = "( /. )"
external let fl0 : Float = "0.0"

(* step 1 *)

let rec is_neg_aux a j =
  if j + 2 <= matrix_dim2 a then
    if less (matrix_get a 0 j) fl0 then True
    else is_neg_aux a (j+1)
  else False

let is_neg a = is_neg_aux a 1

(* step 2 *)

let rec unb1 a i j =
  let rec unb2 a i j =
    if i + 1 <= matrix_dim1 a then
      if less (matrix_get a i j) fl0
      then unb2 a (i+1) j
      else unb1 a 0 (j+1)
    else True in

  if j + 2 <= matrix_dim2 a then
    if less (matrix_get a 0 j) fl0
    then unb2 a (i+1) j
    else unb1 a 0 (j+1)
  else False

(* step 6 *)

let rec norm_aux a i c j =
  if j + 1 <= matrix_dim2 a then (
    matrix_set a i j (div (matrix_get a i j) c);
    norm_aux a i c (j+1))
  else ()

let rec norm a i j =
  let c = matrix_get a i j in
  norm_aux a i c 1

let rec row_op_aux1 a i i' c j =
  if j + 1 <= matrix_dim2 a then
    matrix_set a i' j
      (minus (matrix_get a i' j)
        (mult (matrix_get a i j) c));
    row_op_aux1 a i i' c (j+1)
  else ()

let rec row_op_aux2 a i i' j =
  row_op_aux1 a i i' (matrix_get a i' j) 1

let rec row_op_aux3 a i j i' =
  if i' + 1 <= matrix_dim1 a then
    if i' <= i && i <= i' then (
      row_op_aux2 a i i' j;
      row_op_aux3 a i j (i'+1))
    else row_op_aux3 a i j (i'+1)
  else ()

let rec row_op a i j =
  norm a i j;
  row_op_aux3 a i j 0

let rec simplex a =

  (* step 3 *)

  let rec enter_var j c j' =
    eif j' + 2 <= matrix_dim2 a then
      let c' = matrix_get a 0 j' in
      eif less c' c then enter_var j' c' (j'+1)
      else enter_var j c (j'+1)
    else j in

  (* step 4 *)

  let rec depart_var j i r i' =
    eif i' + 1 <= matrix_dim1 a then
      let c' = matrix_get a i' j in
      eif less fl0 c' then
        let r' = div (matrix_get a i' (matrix_dim2 a + (-1))) c' in
        eif less r' r then depart_var j i' r' (i'+1)
        else depart_var j i r (i'+1)
      else depart_var j i r (i'+1)
    else i in

  (* step 5 *)

  let rec init_ratio j i =
    eif i + 1 <= matrix_dim1 a then
      let c = matrix_get a i j in
      eif less fl0 c then i, div (matrix_get a i (matrix_dim2 a + (-1))) c
      else init_ratio j (i+1)
    else runtime_failure "init_ratio: no variable found" in

  (* step 7 *)

  if is_neg a then
    if unb1 a 0 1 then () (* assert false *)
    else
      let j = enter_var 1 (matrix_get a 0 1) 2 in
      let i, r = init_ratio j 1 in
      let i = depart_var j i r (i+1) in
      row_op a i j;
      simplex a
  else ()
