let rec is_neg_aux arr2 n j =
  if j < n - 1 then
    if Bigarray.Array2.get arr2 0 j < 0.0 then true
    else is_neg_aux arr2 n (j+1)
  else false
in

let is_neg arr2 n = is_neg_aux arr2 n 1
in

(* step 2 *)
(* pmr: oh no - mutual recursion! *)
let rec unb1 arr2 m n i j =
  if j < n-1 then
    if (Bigarray.Array2.get arr2 0 j) < 0.0 then unb2 arr2 m n (i+1) j
    else unb1 arr2 m n 0 (j+1)
  else false

and unb2 arr2 m n i j =
  if i < m then
    if Bigarray.Array2.get arr2 i j < 0.0 then unb2 arr2 m n (i+1) j
    else unb1 arr2 m n 0 (j+1)
  else true
in

(* step 3 *)

let rec enter_var arr2 n j c j' =
  if j' < n-1 then
    let c' = Bigarray.Array2.get arr2 0 j' in begin
	if c' < c then enter_var arr2 n j' c' (j'+1)
	else enter_var arr2 n j c (j'+1)
      end
  else j
in

(* step 4 *)

let rec depart_var arr2 m n j i r i' =
  if i' < m then begin
    let c' = Bigarray.Array2.get arr2 i' j in
      if c' > 0.0 then
        let r' = (Bigarray.Array2.get arr2 i' (n-1)) /. c' in begin
            if r' < r then depart_var arr2 m n j i' r' (i'+1)
            else depart_var arr2 m n j i r (i'+1)
          end
      else depart_var arr2 m n j i r (i'+1)
    end
  else i
in

(*let rec init_ratio_left arr2 m n j i =
  if i < m then
    let c = Bigarray.Array2.get arr2 i j in
      if c > 0.0 then i
      else init_ratio_left arr2 m n j (i+1)
  else assert false
in

let rec init_ratio_right arr2 m n j i =
  if i < m then
    let c = Bigarray.Array2.get arr2 i j in
      if c > 0.0 then (Bigarray.Array2.get arr2 i (n-1)) /. c
      else init_ratio_right arr2 m n j (i+1)
  else assert false
in*)

let rec init_ratio arr2 m n j i =
  if i < m then
    let c = Bigarray.Array2.get arr2 i j in
      if c > 0.0 then (i, (Bigarray.Array2.get arr2 i (n-1)) /. c)
      else init_ratio arr2 m n j (i+1)
  else assert false
in

(* step 5 *)

let rec norm_aux arr2 n i c j =
  if j < n then
    let _none = Bigarray.Array2.set arr2 i j ((Bigarray.Array2.get arr2 i j) /. c) in
      norm_aux arr2 n i c (j+1)
  else ()
in

let norm arr2 n i j =
  let c = Bigarray.Array2.get arr2 i j in
    norm_aux arr2 n i c 1
in

let rec row_op_aux1 arr2 n i i' c j =
  if j < n then
    let cj =  Bigarray.Array2.get arr2 i j in
    let cj' =  Bigarray.Array2.get arr2 i' j in
    let _none = Bigarray.Array2.set arr2 i' j (cj' -. cj *. c) in
      row_op_aux1 arr2 n i i' c (j+1)
  else ()
in

let row_op_aux2 arr2 n i i' j =
  let c' = Bigarray.Array2.get arr2 i' j in
    row_op_aux1 arr2 n i i' c' 1
in

let rec row_op_aux3 arr2 m n i j i' =
  if i' < m then
    if i' <> i then
      let _none = row_op_aux2 arr2 n i i' j in
	row_op_aux3 arr2 m n i j (i'+1)
    else row_op_aux3 arr2 m n i j (i'+1)
  else ()
in

let row_op arr2 m n i j =
    let _none = norm arr2 n i j in
      row_op_aux3 arr2 m n i j 0
in

let rec simplex arr2 m n =
  if is_neg arr2 n then
    if unb1 arr2 m n 0 1 then assert false
    else
      let j = enter_var arr2 n 1 (Bigarray.Array2.get arr2 0 1) 2 in
      (*let i = init_ratio_left arr2 m n j 1 in
      let r = init_ratio_right arr2 m n j 1 in*)
      let zz = init_ratio arr2 m n j 1 in
      let i = fst zz in
      let r = snd zz in
      let i = depart_var arr2 m n j i r (i+1) in
      let _none = row_op arr2 m n i j in
	simplex arr2 m n
  else ()
in

let main a =
  let m = Bigarray.Array2.dim1 a in
  let n = Bigarray.Array2.dim2 a in
    if m > 1 then begin
      if n > 2 then simplex a m n
      else assert false
    end
    else assert false
in
  Random.self_init();
  let arr = Bigarray.Array2.create Bigarray.float64 Bigarray.c_layout
    (Random.int 20 + 1)
    (Random.int 30 + 1) in
    main arr;;