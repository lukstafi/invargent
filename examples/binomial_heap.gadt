newtype Tree : type * num
newtype Forest : type * num
newtype Heap : type * num * num
newtype Order : num * num
newcons Le : ∀i, j [i≤j+1]. Order (i, j)
newcons Gt : ∀i, j [j≤i+1]. Order (i, j)
newcons Eq : ∀i. Order (i, i)

newcons Node : ∀a, k [0≤k]. Num k * a * Forest (a, k) ⟶ Tree (a, k)
newcons TCons :
  ∀a, n [0≤n]. Tree (a, n) * Forest (a, n) ⟶ Forest (a, n+1)
newcons TNil : ∀a. Forest (a, 0)
newcons HCons :
  ∀a, k, m, n [0≤k ∧ k+1≤m ∧ m≤n].
    Tree (a, k) * Heap (a, m, n) ⟶ Heap (a, k, n)
newcons HNil : ∀a, n. Heap (a, n, n)

external compare : ∀i, j. Num i → Num j → Order (i, j)
external leq : ∀a. a → a → Bool
external incr : ∀i. Num i → Num (i+1)

external rank : ∀a, n. Tree (a, n) → Num n
external link : ∀a, n. (Tree (a, n), Tree (a, n)) → Tree (a, n+1)

let rank = function Node (r, _, _) -> r

let link = function
  | (Node (r, x1, c1) as t1), (Node (_, x2, c2) as t2) ->
    match leq x1 x2 with
    | True -> Node (incr r, x1, TCons (t2, c1))
    | False -> Node (incr r, x2, TCons (t1, c2))

let rec ins_tree = fun t ->
  efunction
  | HNil -> HCons (t, HNil)
  | HCons (t', ts') as ts ->
    ematch compare (rank t) (rank t') with
    | Le -> HCons (t, ts)
    | Eq -> ins_tree (link (t, t')) ts'
    | Gt ->
      let rts = ins_tree t ts' in
      HCons (t', rts)

let rec merge =

let rec remove_min_tree =

let delete_min =
