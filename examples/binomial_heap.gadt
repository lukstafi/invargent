(** We follow the implementation from Chris Okasaki "Purely Functional
    Data Structures". The only difference is that instead of a generic
    list type, we need two specific data types, [Forest] and [Heap]. *)

datatype Order : order
datacons Zero : Order zero
datacons Succ : ∀o. Order o ⟶ Order (succ o)

datatype Tree : type * order
datatype Forest : type * order
datatype Heap : type * order

datacons Node : ∀a, o. Order o * a * Forest (a, o) ⟶ Tree (a, o)
datacons TCons :
  ∀a, o. Tree (a, o) * Forest (a, o) ⟶ Forest (a, succ o)
datacons TNil : ∀a. Forest (a, zero)
datacons HCons :
  ∀a, p, q [succ p ≤ q]. Tree (a, p) * Heap (a, q) ⟶ Heap (a, p)
datacons HNil : ∀a. Heap (a, top)

external let leq : ∀a. a → a → Bool = "(<=)"

let rank = function Node (r, _, _) -> r

let root = function Node (_, x, _) -> x

let link = function
  | (Node (r, x1, c1) as t1), (Node (_, x2, c2) as t2) ->
    match leq x1 x2 with
    | True -> Node (Succ r, x1, TCons (t2, c1))
    | False -> Node (Succ r, x2, TCons (t1, c2))

let rec ins_tree = fun t ->
  efunction
  | HNil -> HCons (t, HNil)
  | HCons (t', ts') as ts ->
    ematch rank t, rank t' with
    | i, Succ j when order i<=j -> HCons (t, ts)
    | i, j when order i<=j && j<=i -> ins_tree (link (t, t')) ts'
    | Succ i, j when order j<=i ->
      let rts = ins_tree t ts' in
      HCons (t', rts)

let insert = fun x ts -> ins_tree (Node (Zero, x, TNil)) ts

let rec merge = efunction
  | HNil, HNil -> HNil
  | (HCons (_,_) as ts1), HNil -> ts1
  | HNil, (HCons (_,_) as ts2) -> ts2
  | (HCons (t1, ts1') as ts1), (HCons (t2, ts2') as ts2) ->
    ematch rank t1, rank t2 with
    | i, j when order Succ i<=j ->
      let rts = merge (ts1', ts2) in
      HCons (t1, rts)
    | i, j when order i<=j && j<=i ->
      let rts = merge (ts1', ts2') in
      ins_tree (link (t1, t2)) rts 
    | i, j when order Succ j<=i ->
      let rts = merge (ts1, ts2') in
      HCons (t2, rts)

let rec remove_min_tree = efunction
  | HNil -> assert false
  | HCons (t, HNil) -> t, HNil
  | HCons (t, (HCons (_, _) as ts)) ->
    let t', ts' = remove_min_tree ts in
    ematch leq (root t) (root t') with
    | True -> t, ts
    | False -> t', HCons (t, ts')

let find_min ts =
  let t, _ = remove_min_tree ts in
  root t

let rec heap_of_forset = function
  | TNil -> HNil
  | TCons (t, ts) ->
    HCons (t, heap_of_forset ts)

let delete_min = fun ts ->
  let Node (_, _, ts1), ts2 = remove_min_tree ts in
  merge (heap_of_forest ts1, ts2)
