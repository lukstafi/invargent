newtype Level : lattice
newtype Int : lattice
newcons Zero : ∀l. Int(l)

newtype Compared : lattice * lattice
newcons Leq : ∀a, b) with a <: b: Compared (a, b)
newcons Geq : ∀a, b) with b <: a: Compared (a, b)
newcons Incomp : ∀a, b. Compared (a, b)

external compare : ∀a, b. Level(a) → Level(b) → Compared (a, b)

newelem lattice Clients
newcons Clients : Level(Clients)
newelem lattice ClientsEurope
assert lattice ClientsEurope <: Clients
newcons ClientsEurope : Level(ClientsEurope)

newtype ClientInfo
newcons AccountBalance : for all l
  with l <: Clients: Int(l) * Level(l) ⟶ ClientInfo

external sum : ∀a, b, c)
  with a <: c && b <: c: Int(a) -> Int(b) -> Int(c)

newtype Accounts
newcons CNil : Accounts
newcons CCons : ClientInfo * Accounts ⟶ Accounts

let rec total_region m = function
  | CNil -> Zero
  | CCons (AccountBalance (i, l), cs) ->
    match compare l m with
      | Leq -> sum i (total_region m cs)
      | _ -> total_region m cs
