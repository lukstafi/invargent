(** Normally we would use [num], but this is a stress test for [type]. *)
datatype Z
datatype S : type
(** This datatype definition is modified to make type inference for
    rotr, rotl, ins functions pointwise. *)
datatype AVL : type
datacons Tip : AVL Z
datacons LNode : ∀a. AVL a * Int * AVL (S a) ⟶ AVL (S (S a))
datacons SNode : ∀a. AVL a * Int * AVL a ⟶ AVL (S a)
datacons MNode : ∀a. AVL (S a) * Int * AVL a ⟶ AVL (S (S a))

datatype Choice : type * type
datacons L : ∀a, b. a ⟶ Choice (a, b)
datacons R : ∀a, b. b ⟶ Choice (a, b)

datatype LinOrder
datacons LT : LinOrder
datacons EQ : LinOrder
datacons GT : LinOrder
external let compare : ∀a. a → a → LinOrder =
  "fun x y -> let c=Pervasives.compare x y in
              if c<0 then LT else if c=0 then EQ else GT"

external rotl :
  ∀a. AVL a → Int → AVL (S (S a)) → Choice (AVL (S (S a)), AVL (S (S (S a))))

external rotr :
  ∀a. AVL (S (S a)) → Int → AVL a → Choice (AVL (S (S a)), AVL (S (S (S a))))

let rec ins = fun i -> function
  | Tip -> R (SNode (Tip, i, Tip))
  | SNode (a, x, b) as t ->
    (match compare i x with
      | EQ -> L t
      | LT ->
        (match ins i a with
          | L a -> L (SNode (a, x, b))
          | R a -> R (MNode (a, x, b)))
      | GT ->
        (match ins i b with
          | L b -> L (SNode (a, x, b))
          | R b -> R (LNode (a, x, b))))
  | LNode (a, x, b) as t ->
    (match compare i x with
      | EQ -> L t
      | LT ->
        (match ins i a with
          | L a -> L (LNode (a, x, b))
          | R a -> L (SNode (a, x, b)))
      | GT ->
        (match ins i b with
          | L b -> L (LNode (a, x, b))
          | R b -> rotl a x b))
  | MNode (a, x, b) as t ->
    (match compare i x with
      | EQ -> L t
      | LT ->
        (match ins i a with
          | L a -> L (MNode (a, x, b))
          | R a -> rotr a x b)
      | GT ->
        (match ins i b with
          | L b -> L (MNode (a, x, b))
          | R b -> L (SNode (a, x, b))))
