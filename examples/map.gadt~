newtype List : type * nat
newtype Foo
newtype Bar

external f : Foo -> Bar

newcons LNil : for all a: List(a, 0)
newcons LCons : for all (n, a): a * List(a, n) âŸ¶ List(a, n+1)

let rec map =
  function LNil -> LNil
    | LCons (x, l) -> LCons (f x, map l)
