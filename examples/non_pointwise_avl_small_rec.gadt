(** Normally we would use [num], but this is a stress test for [type]. *)
datatype Z
datatype S : type
datatype Balance : type * type * type
datacons Less : ∀a. Balance (a, S a, S a)
datacons Same : ∀a. Balance (a, a, a)
datacons More : ∀a. Balance (S a, a, S a)
datatype AVL : type
datacons Leaf : AVL Z
datacons Node :
  ∀a, b, c. Balance (a, b, c) * AVL a * Int * AVL b ⟶ AVL (S c)

datatype Choice : type * type
datacons Left : ∀a, b. a ⟶ Choice (a, b)
datacons Right : ∀a, b. b ⟶ Choice (a, b)

let rec rotr z d = function
  | Leaf -> assert false
  | Node (Less, a, x, Leaf) -> assert false
  | Node (Same, a, x, (Node (_,_,_,_) as b)) ->
    Right (Node (Less, a, x, Node (More, b, z, d)))
