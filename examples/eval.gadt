newtype Term : type
newtype Integer
newtype Boolean

external plus : Integer → Integer → Integer
external is_zero : Integer → Boolean
external if_then : ∀a. Boolean → a → a → a

newcons Lit : Integer ⟶ Term Integer
newcons Plus : Term Integer * Term Integer ⟶ Term Integer
newcons IsZero : Term Integer ⟶ Term Boolean
newcons If : ∀a. Term Boolean * Term a * Term a ⟶ Term a
newcons Pair : ∀a, b. Term a * Term b ⟶ Term (a, b)
newcons Fst : ∀a, b. Term (a, b) ⟶ Term a
newcons Snd : ∀a, b. Term (a, b) ⟶ Term b

let rec eval = function
  | Lit i -> i
  | IsZero x -> is_zero (eval x)
  | Plus (x, y) -> plus (eval x) (eval y)
  | If (b, t, e) -> if_then (eval b) (eval t) (eval e)
  | Pair (x, y) -> eval x, eval y
  | Fst p -> (match eval p with x, y -> x)
  | Snd p -> (match eval p with x, y -> y)
