newtype Term : type

newtype Calc

newtype Boolean

external is_zero : ∀i. Num i → Boolean

newtype Ex1

newcons Ex1 : ∀k.Num k ⟶ ∃1:k.Num k

external cond : ∀i, j. Boolean → Num i → Num j → ∃1:k.Num k

external if_then : ∀a. Boolean → a → a → a

newcons Lit : ∀k.Num k ⟶ Calc

newcons Cond : Term Boolean * Calc * Calc ⟶ Calc

newcons IsZero : Calc ⟶ Term Boolean

newcons If : ∀a.Term Boolean * Term a * Term a ⟶ Term a

val snd : ∀a, b. (a, b) → b

newtype Ex2

newcons Ex2 : ∀n.Num n ⟶ Ex2

val calc : Calc → ∃2:n.Num n

val eval : ∀a. Term a → a
