datatype List : type
datacons N : ∀a. List a
datacons C : ∀a. a * List a ⟶ List a

datatype Zip2 : type * type
datacons Zero2 : ∀a. Zip2 (a, List a)
datacons Succ2 :
  ∀a, b, c. Zip2 (a, b) ⟶ Zip2 ((c → a), (List c → b))

let rec zipZ = function
  | Zero2 -> N
  | Succ2 n -> fun _ -> zipZ n
