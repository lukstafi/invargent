datatype Array : type * num
external let array_make :
  ∀n, a [0≤n]. Num n → a → Array (a, n) = "fun a b -> Array.make a b"
external let array_get :
  ∀n, k, a [0≤k ∧ k+1≤n]. Array (a, n) → Num k → a = "fun a b -> Array.get a b"
external let array_set :
  ∀n, k, a [0≤k ∧ k+1≤n]. Array (a, n) → Num k → a → () =
  "fun a b c -> Array.set a b c"
external let array_length :
  ∀n, a [0≤n]. Array (a, n) → Num n = "fun a -> Array.length a"

external let div2 : ∀n. Num (2 n) → Num n = "fun x -> x / 2"

external let n2i : ∀n. Num n → Int = "fun i -> i"
external let equal : ∀a. a → a → Bool = "fun x y -> x = y"
external let leq : ∀a. a → a → Bool = "fun x y -> x <= y"
external let less : ∀a. a → a → Bool = "fun x y -> x < y"

external let print : String → () = "print_string"
external let string_make : Int → String → String =
  "fun n s -> String.make n s.[0]"
external let string_of_int : Int → String = "string_of_int"

external let abs : Int → Int = "fun i -> if i < 0 then ~-i else i"
external let minus : Int → Int → Int = "(-)"
external let plus : Int → Int → Int = "(+)"
external let int0 : Int = "0"

external heapify :
   ∀i, k, n, a[i ≤ k ∧ n + 1 ≤ i ∧ 0 ≤ n].
   Num i → Array (a, k) → Num n → ()

external buildheap :
   ∀k, n, a[k ≤ n ∧ 0 ≤ k]. Num k → Array (a, n) → ()

let heapsort size data =
  buildheap size data;
  let rec loop i =
    if 1 <= i then
      let temp = array_get data i in
      array_set data i (array_get data 0);
      array_set data 0 temp;
      heapify i data 0;
      loop (i - 1)
    else () in
      (*withtype {i:int | i < n} <max(i,0)> => int(i) -> unit*)
  loop (size - 1)
(*withtype {n:nat} float heap(n) -> unit*)
