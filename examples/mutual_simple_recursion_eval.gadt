newtype Term : type
newtype Calc
newtype Boolean

external is_zero : ∀i. Num i → Boolean
external cond : ∀i,j. Boolean → Num i → Num j → ∃k. Num k
external if_then : ∀a. Boolean → a → a → a

newcons Lit : ∀k. Num k ⟶ Calc
newcons Cond : Term Boolean * Calc * Calc ⟶ Calc

newcons IsZero : Calc ⟶ Term Boolean
newcons If : ∀a. Term Boolean * Term a * Term a ⟶ Term a

let snd = function _, x -> x

let calc, eval =
  let rec eval =
    let rec calc =
      efunction
      | Lit i -> i
      | Cond (b, t, e) ->
        let rt = calc t in
        let re = calc e in
        cond (snd eval b) rt re in
    calc, function
    | IsZero x -> let r = calc x in is_zero r
    | If (b, t, e) -> if_then (snd eval b) (snd eval t) (snd eval e) in
  eval
