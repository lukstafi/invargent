newtype Term : type
newtype Calc

external let is_zero : ∀i. Num i → Bool = "(=) 0"
external let cond : ∀i,j. Bool → Num i → Num j → ∃k. Num k = "fun c a b -> if c then a else b"

newcons Lit : ∀k. Num k ⟶ Calc
newcons Cond : Term Bool * Calc * Calc ⟶ Calc

newcons IsZero : Calc ⟶ Term Bool
newcons If : ∀a. Term Bool * Term a * Term a ⟶ Term a

let snd = function _, x -> x

let calc, eval =
  let rec eval =
    let rec calc =
      efunction
      | Lit i -> i
      | Cond (b, t, e) ->
        let rt = calc t in
        let re = calc e in
        cond (snd eval b) rt re in
    calc, function
    | IsZero x -> let r = calc x in is_zero r
    | If (b, t, e) -> (match snd eval b with True -> snd eval t | False -> snd eval e) in
  eval
