datatype List : type
datacons N : ∀a. List a
datacons C : ∀a. a * List a ⟶ List a

datatype Zip1 : type * type
datacons Zero1 : ∀a. Zip1 (List a, List a)
datacons Succ1 :
  ∀a, b, c. Zip1 (List a, b) ⟶ Zip1 (List (c → a), (List c → b))

external zip_with : ∀a, b, c. (a → b → c) → List a → List b → List c

external repeat : ∀a. a → List a

let zip1 =
  let rec apply = fun f x -> f x in
  let rec z1 = fun fs -> function
    | Zero1 -> fs
    | Succ1 n2 -> fun xs -> z1 (zip_with apply fs xs) n2 in
  fun n f -> z1 (repeat f) n
  