module Big = Bigarray.Array2

let sub2 data i j = 
  Big.get data i j 

let update2 data i j x = 
  Big.set data i j x

let fillar arr2 fill =
  let d1 = Big.dim1 arr2 in
  let d2 = Big.dim2 arr2 in
  let rec loop i =
    let i' = i + 1 in 
      if i < d1 
      then
        let rec loopi j =
          let j' = j + 1 in
           if j < d2 then
             let elt = fill () in
             (Big.set arr2 i j elt; loopi j')
           else
             ()
        in loopi 0
      else
          loop i'
  in loop 0

let matmul a b =
  let p = Big.dim1 a in
  let q = Big.dim2 a in
  let r = Big.dim2 b in

  let cdata = Big.create Bigarray.int Bigarray.c_layout p r in
  let zero _none = 0 in
  let _none = fillar cdata zero in

  let rec loop1 i =
    if i < p then
      let rec loop2 j =
	if j < r then
	  let rec loop3 k sum =
	    if k < q then
              let k' = k + 1 in
              let _none = (fun s -> s) i in
              let saik = sub2 a i k in
              let _none = (fun s -> s) k in
              let sbkj = sub2 b k j in
              let sum_p = sum + saik in
              let sum_p = sum_p + sbkj in
		loop3 k' sum_p 
	    else sum
          in let l3 = loop3 0 0 in
	  let _none = update2 cdata i j l3  in
          let j' = j + 1 in
	    loop2 j'
	else () in
      let _none = loop2 0 in
      let i' = i + 1 in
	loop1 i'
    else ()
  in loop1 0; cdata
