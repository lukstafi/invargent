
(*
  let rec move (n, source, s, post, p, post', p') =
    if n = 1 then
      begin post[p - 1] <-  source[s]; source[s] <- 0 end
    else begin
      move(n-1, source, s, post', p', post, p);
      post[p - 1] <- source[s + n - 1];
      source[s + n - 1] <- 0;
      move(n-1, post', p'-n+1, post, p - 1, source, s + n)
    end
  move(size, leftPost, 0, rightPost, size, middlePost, size)
*)


(*
let{Array.length:int | Array.length > 0}
play Array.length =
  let leftPost = Array.make_vect Array.length 0
  and middlePost = Array.make_vect Array.length 0
  and rightPost = Array.make_vect Array.length 0 in

  let initialize post =
    for i = 0 to Array.length - 1 do
      post..(i) <- i+1
    done
  withtype int vect(Array.length) -> unit in

  let showpiece n =
    for i = 1 to n do print_string "O" done;
    for i = n + 1 to Array.length do print_string " " done in

  let showposts () =
    for i = 0 to Array.length - 1 do
      showpiece leftPost..(i);
      print_string "  ";
      showpiece middlePost..(i);
      print_string "  ";
      showpiece rightPost..(i);
      print_newline ()
    done;
    print_newline ()
  withtype unit -> unit in

  let _ = initialize(leftPost) in
  let rec move (n, source, s, post, p, post', p') =
    if n = 1 then
      begin post[p - 1] <-  source[s]; source[s] <- 0 end
    else begin
      move(n-1, source, s, post', p', post, p);
      post[p - 1] <- source[s + n - 1];
      source[s + n - 1] <- 0;
      move(n-1, post', p'-n+1, post, p - 1, source, s + n)
    end
  move(size, leftPost, 0, rightPost, size, middlePost, size)
;; *)