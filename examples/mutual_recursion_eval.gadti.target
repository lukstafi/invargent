newtype Term : type

newtype Num : num

newtype Calc

newtype Bool

external plus : ∀i,j. Num i → Num j → Num (i+j)

external mult : ∀i,j. Num i → Num j → ∃k. Num k

external is_zero : ∀i. Num i → Bool

external cond : ∀i,j. Bool → Num i → Num j → ∃k. Num k

external if : ∀a. Bool → a → a → a

newcons Lit : ∀k. Num k ⟶ Calc

newcons Plus : Calc * Calc ⟶ Calc

newcons Mult : Calc * Calc ⟶ Calc

newcons Cond : Term Bool * Calc * Calc ⟶ Calc

newcons IsZero : Calc ⟶ Term Bool

newcons If : ∀a. Term Bool * Term a * Term a ⟶ Term a

newcons Pair : ∀a, b. Term a * Term b ⟶ Term (a, b)

newcons Fst : ∀a, b. Term (a, b) ⟶ Term a

newcons Snd : ∀a, b. Term (a, b) ⟶ Term b

val snd : ∀a, b. (a, b) → b

val calc : Calc → ∃3:n[].Num n

val eval : ∀a. Term a → a