datatype Array : type * num
external let array_make :
  ∀n, a [0≤n]. Num n → a → Array (a, n) = "fun a b -> Array.make a b"
external let array_get :
  ∀n, k, a [0≤k ∧ k+1≤n]. Array (a, n) → Num k → a = "fun a b -> Array.get a b"
external let array_set :
  ∀n, k, a [0≤k ∧ k+1≤n]. Array (a, n) → Num k → a → () =
  "fun a b c -> Array.set a b c"
external let array_length :
  ∀n, a [0≤n]. Array (a, n) → Num n = "fun a -> Array.length a"

datatype LinOrder
datacons LE : LinOrder
datacons GT : LinOrder
datacons EQ : LinOrder

external let compare : ∀a. a → a → LinOrder =
  "fun a b -> let c = Pervasives.compare a b in
              if c < 0 then LE else if c > 0 then GT else EQ"
external let equal : ∀a. a → a → Bool = "fun a b -> a = b"

external swap : ∀n, k, i, a [0 ≤ n ∧ 0 ≤ k ∧ k + 1 ≤ i ∧ n + 1 ≤ i].
      Array (a, i) → Num k → Num n → ()

let rec insertSort = fun arr start finish ->
  let rec outer = fun i ->
    if finish + 1 <= i then ()
    else
      let rec inner = fun j ->
        if j <= start then outer (i + 1)
        else if equal (compare (array_get arr j) (array_get arr (j - 1))) LE
        then (swap arr j (j - 1); inner (j - 1))
        else outer (i + 1) in
      inner i in
  outer (start + 1)
