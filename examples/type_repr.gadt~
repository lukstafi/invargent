newtype Ty : type
newtype Int
newtype List : type

newcons TInt : Ty Int
newcons TPair : for all (a, b) : Ty a * Ty b ⟶ Ty (a, b)
newcons TList : for all a : Ty a ⟶ Ty (List a)

newtype Bool
newcons B_true : Bool
newcons B_false : Bool

external eq_int : Int -> Int -> Bool
external b_and : Bool -> Bool -> Bool

let rec equal = function
  | TInt, TInt -> fun x y -> eq_int x y
  | Pair (t1, t2), Pair (u1, u2) ->
    function x1, x2 ->
      function y1, y2 ->
        b_and (equal (t1, u1) x1 y1) (equal (t2, u2) x2 y2)
  | List t, List u -> forall2 (equal (t, u))
  | _ -> B_false

external exit : for all t : t
external map : for all (a, b) : (a -> b) -> List a -> List b 

let rec coerce = function
  | TInt, TInt ->  fun x -> x
  | Pair (t1, t2), Pair (u1, u2) ->
    (function x1, x2 ->
      coerce (t1, u1) x1, coerce (t2, u2) x2)
  | List t, List u -> fun xs ->
    map (coerce (t, u)) xs
  | _ -> exit
      