datatype Order : order

datacons Zero : Order zero

datacons Succ : ∀o. Order o ⟶ Order (succ o)

datatype Tree : type * order

datatype Forest : type * order

datatype Heap : type * order

datacons Node : ∀a, o. Order o * a * Forest (a, o) ⟶ Tree (a, o)

datacons TCons :
  ∀a, o. Tree (a, o) * Forest (a, o) ⟶ Forest (a, succ o)

datacons TNil : ∀a. Forest (a, zero)

datacons HCons :
  ∀a, p, q [succ p ≤ q]. Tree (a, p) * Heap (a, q) ⟶ Heap (a, p)

datacons HNil : ∀a. Heap (a, top)

external let leq : ∀a. a → a → Bool = "(<=)"

val rank : ∀a, o. Tree (a, o) → Order o

val link : ∀a, o. (Tree (a, o), Tree (a, o)) → Tree (a, succ o)

val ins_tree : ∀a, p, q. Tree (a, p) → Heap (a, q) →
            ∃o[min (p, q) ≤ o]. Heap (a, o)

val merge :

val remove_min_tree :

val delete_min :
