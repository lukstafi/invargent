(** Normally we would use [num], but this is a stress test for [type]. *)
datatype Z
datatype S : type
(** This datatype definition is modified to make type inference for
    rotr, rotl, ins functions pointwise. *)
datatype AVL : type
datacons Tip : AVL Z
datacons LNode : ∀a. AVL a * Int * AVL (S a) ⟶ AVL (S (S a))
datacons SNode : ∀a. AVL a * Int * AVL a ⟶ AVL (S a)
datacons MNode : ∀a. AVL (S a) * Int * AVL a ⟶ AVL (S (S a))

datatype Choice : type * type
datacons L : ∀a, b. a ⟶ Choice (a, b)
datacons R : ∀a, b. b ⟶ Choice (a, b)

datatype Zero : type
datacons IsZ : Zero Z
datacons NotZ : ∀a. Zero (S a)

external rotl :
  ∀a. AVL a → Int → AVL (S (S a)) → Choice (AVL (S (S a)), AVL (S (S (S a))))

external rotr :
  ∀a. AVL (S (S a)) → Int → AVL a → Choice (AVL (S (S a)), AVL (S (S (S a))))

let empty = function
  | Tip -> IsZ
  | LNode (_, _, _) -> NotZ
  | SNode (_, _, _) -> NotZ
  | MNode (_, _, _) -> NotZ

let rec delmin = function
  | LNode (a, x, b) ->
    (match empty a with
      | IsZ -> x, L b
      | NotZ ->
        let y, k = delmin a in
        (match k with
          | L a -> y, rotl a x b
          | R a -> y, R (LNode (a, x, b))))
  | SNode (a, x, b) ->
    (match empty a with
      | IsZ -> x, L b
      | NotZ ->
        let y, k = delmin a in
        (match k with
          | L a -> y, R (LNode (a, x, b))
          | R a -> y, R (SNode (a, x, b))))
  | MNode (a, x, b) ->
    let y, k = delmin a in
    (match k with
      | L a -> y, L (SNode (a, x, b))
      | R a -> y, R (MNode (a, x, b)))
