(** Expressions representing computations on numbers and tuples. *)
datatype Term : type
(** Expressions representing computations on tuples. *)
datatype (* this part ignored*) Calc

(** Multiplication packs the result into existential type. *)
external let mult : ∀i,j. Num i → Num j → ∃k. Num k = "( * )"
external let is_zero : ∀i. Num i → Bool = "(=) 0"
(** Conditional is eager -- computes all its arguments. *)
external let cond : ∀i,j. Bool → Num i → Num j → ∃k. Num k = "fun c a b -> if c then a else b"

(** Numerical constants. *)
datacons Lit : ∀k. Num k ⟶ Calc
(** Addition. Note that we do not convey any information about the result:
    [Calc] does not have a parameter. *)
datacons Plus : Calc * Calc ⟶ Calc
datacons Mult : Calc * Calc ⟶ Calc
(** Conditional. *)
datacons Cond : Term Bool * Calc * Calc ⟶ Calc

datacons IsZero : Calc ⟶ Term Bool
(** Conditional on terms is lazy -- uses pattern matching on [Bool] type
    which is exported to OCaml source using [if] expression. *)
datacons If : ∀a. Term Bool * Term a * Term a ⟶ Term a
datacons Pair : ∀a, b. Term a * Term b ⟶ Term (a, b)
datacons Fst : ∀a, b. Term (a, b) ⟶ Term a
datacons Snd : ∀a, b. Term (a, b) ⟶ Term b

(** Small definition. *)
let snd = function _, x -> x

(** Exposing multiple mutually recursive definitions is tricky, it would
    be easier to only expose the external one. *)
let (* nested *) calc, (* and outer *) eval =
  (** [eval] has to expose its "helper" function. *)
  let rec eval =
    let rec calc =
      efunction
      | Lit i -> i
      | Plus (x, y) ->
        (** Recursive call of [calc]. *) 
        let rx = calc x in
        (** Another recursive call. *)
        let ry = calc y in
        rx + ry
      | Mult (x, y) ->
        let rx = calc x in
        let ry = calc y in
        mult rx ry
      | Cond (b, t, e) ->
        let rt = calc t in
        let re = calc e in
        (* Here we mutually-recursively call [eval]. *)
        cond (snd eval b) rt re in
    calc, function
    | IsZero x -> (** Mutually-recursive call. *) let r = calc x in is_zero r
    | If (b, t, e) -> (match snd eval b with True -> snd eval t
                       | False -> snd eval e) (* this is if-then-else *)
    | Pair (x, y) -> snd eval x, snd eval y
    | Fst p -> (match snd eval p with x, y -> x)
    | Snd p -> (match snd eval p with x, y -> y) in
  eval
