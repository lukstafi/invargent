datatype Array : type * num
external let array_make :
  ∀n, a [0≤n]. Num n → a → Array (a, n) = "fun a b -> Array.make a b"
external let array_get :
  ∀n, k, a [0≤k ∧ k+1≤n]. Array (a, n) → Num k → a = "fun a b -> Array.get a b"
external let array_set :
  ∀n, k, a [0≤k ∧ k+1≤n]. Array (a, n) → Num k → a → () =
  "fun a b c -> Array.set a b c"
external let array_length :
  ∀n, a [0≤n]. Array (a, n) → Num n = "fun a -> Array.length a"

datatype LinOrder
datacons LE : LinOrder
datacons GT : LinOrder
datacons EQ : LinOrder

external let compare : ∀a. a → a → LinOrder =
  "fun a b -> let c = Pervasives.compare a b in
              if c < 0 then LE else if c > 0 then GT else EQ"
external let equal : ∀a. a → a → Bool = "fun a b -> a = b"

let insertSort = fun arr ->
  let rec item = fun i -> array_get arr i in
  let rec len = array_length arr in
  let rec swap = fun i j ->
    let tmpj = item j in
    let tmpi = item i in
    array_set arr i tmpj; array_set arr j tmpi in
  let rec outer = fun i ->
    if len <= i then ()
    else
      let rec inner = fun j ->
        if j <= 0 then outer (i + 1)
        else if equal (compare (item j) (item (j - 1))) LE
        then (swap j (j - 1); inner (j - 1))
        else outer (i + 1) in
      inner i in
  outer 1
