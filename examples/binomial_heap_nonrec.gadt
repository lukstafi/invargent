datatype Tree : type * num
datatype Forest : type * num

datacons Node : ∀a, k [0≤k]. Num k * a * Forest (a, k) ⟶ Tree (a, k)
datacons TCons :
  ∀a, n [0≤n]. Tree (a, n) * Forest (a, n) ⟶ Forest (a, n+1)
datacons TNil : ∀a. Forest (a, 0)

external let leq : ∀a. a → a → Bool = "(<=)"

let rank = function Node (r, _, _) -> r

let link = function
  | (Node (r, x1, c1) as t1), (Node (_, x2, c2) as t2) ->
    if leq x1 x2 then Node (r+1, x1, TCons (t2, c1))
    else Node (r+1, x2, TCons (t1, c2))
