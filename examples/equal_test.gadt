newtype Ty : type
newtype Integer
newtype List : type
newcons Zero : Integer
newcons Nil : ∀a. List a
newcons TInt : Ty Integer
newcons TPair : ∀a, b. Ty a * Ty b ⟶ Ty (a, b)
newcons TList : ∀a. Ty a ⟶ Ty (List a)
newtype Boolean
newcons True : Boolean
newcons False : Boolean
external eq_int : Integer → Integer → Boolean
external b_and : Boolean → Boolean → Boolean
external b_not : Boolean → Boolean
external forall2 : ∀a, b. (a → b → Boolean) → List a → List b → Boolean

let rec equal = function
  | TInt, TInt -> fun x y -> eq_int x y
  | TPair (t1, t2), TPair (u1, u2) ->  
    (fun (x1, x2) (y1, y2) ->
        b_and (equal (t1, u1) x1 y1)
              (equal (t2, u2) x2 y2))
  | TList t, TList u -> forall2 (equal (t, u))
  | _ -> fun _ _ -> False
test b_not (equal (TInt, TList TInt) Zero Nil)